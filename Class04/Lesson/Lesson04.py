# def f(x):
#     return x*x
# print(f(5))
# a = f # функцию F можно приравнять другую переменную, которая будет обращаться к тому же модулю памяти, которая хранит данные функции F
# print(a(5))
# print(f(5))

"""
def calk1(a):
    return a + a

def calk2(a):
    return a * a

def math(op, x):
    print(op(x))

math(calk1, 5) # в функцию math передаем через op функцию calk1 или calk2 и переменную 5, 
# затем вызываем ее и выводим на экран через print(op(x))
"""

"""
# Можно передавать несколько значений
def calk1(a, b):
    return a + b

def calk2(a, b):
    return a * b

def math(op, x, y):
    print(op(x, y))

math(calk2, 5, 45)
"""

# Заменяем функцию calk1 ламнбда-функцией (lambda)
"""
def calk2(a, b):
    return a * b

calk1 = lambda a,b: a + b # это сокращенное написание функции calk1 через ламнбда-функцию

def math(op, x, y):
    print(op(x, y))

math(calk1, 5, 45)
"""

# Можно заменить все функции ламнбда-функцией
"""
calk1 = lambda a,b: a + b
calk2 = lambda a,b: a * b
math = lambda op,x,y: print(op(x,y))
math(calk2, 5, 45)

# или
# def math(op, x, y):
#     print(op(x, y))
math = lambda op,x,y: print(op(x,y))
math(lambda a,b: a + b, 5, 45)
"""

"""
# data = [1, 2, 3, 5, 8, 15, 23, 38]
# res = list()

# for i in data:
#     if i % 2 == 0:
#         res.append((i, i ** 2)) # выводим ввиде кортежа (ставим две скобочки, чтобы при выводе на экран получить значения в [])
# print(res)

# Преобразовываем в функции

def select(f, col):
    return [f(x) for x in col]

def where(f, col):
    return [x for x in col if f(x)]

data = [1, 2, 3, 5, 8, 15, 23, 38]
res = select(int, data)
print(res)
res = where(lambda x: x % 2 == 0, res)
print(res)
res = list(select(lambda x: (x, x ** 2), res))
print(res)
"""


# Функция map
# Функция map() применяет указанную функцию к каждому элементу итерируемого объекта и
# возвращает итератор с новыми объектами

"""
list_1 = [x for x in range(1, 20)]
print(list_1)

list_1 = list(map(lambda x: x + 10, list_1)) # функция map принимает другую функцию (lambda x: x + 10) и применяет ее ко всем объектам (list_1), 
# т.е. все значения в list_1 увеличивает на 10
print(list_1)
"""

# Задача: C клавиатуры вводится некий набор чисел, в качестве разделителя используется
# пробел. Этот набор чисел будет считан в качестве строки. Как превратить list строк в list чисел?
"""
data = '1 2 3 5 8 15 23 38'
print(data)
data = data.split() # .split() преобразует строку в список в скобочках указывают разделитель (',')
print(data)
"""

# Чтобы преобразовать список строк в список чисел используем функцию map и int
"""
data = '1 2 3 5 8 15 23 38'
print(data)
data = list(map(int, data.split()))
print(data)
"""

# Функция filter

# Функция filter() применяет указанную функцию к каждому элементу итерируемого объекта и
# возвращает итератор с теми объектами, для которых функция вернула True

# Задача. Необходимо вывести на экран только те числа списка, которые заканчиваются на 5
"""
data = [15, 65, 9, 36, 175]
res = list(filter(lambda x: x % 10 == 5, data))
print(res)
"""

# Преобразовываем исходный код с заменой на map и filter
# def select(f, col):
#     return [f(x) for x in col]

# def where(f, col):
#     return [x for x in col if f(x)]

# data = [1, 2, 3, 5, 8, 15, 23, 38]
# res = select(int, data)
# print(res)
# res = where(lambda x: x % 2 == 0, res)
# print(res)
# res = list(select(lambda x: (x, x ** 2), res))
# print(res)

"""
data = [1, 2, 3, 5, 8, 15, 23, 38]
res = map(int, data)
res = filter(lambda x: x % 2 == 0, res)
res = list(map(lambda x: (x, x ** 2), res))
print(res)
"""

# Функция zip

# Функция zip() применяется к набору итерируемых объектов и возвращает итератор с кортежами
# из элементов входных данных
"""
users = ['user1', 'user2', 'user3', 'user4', 'user5']
ids = [4, 5, 9, 14, 7]
data = list(zip(users, ids))
print(data) # [('user1', 4), ('user2', 5), ('user3', 9), ('user4', 14), ('user5', 7)]
"""

# Функция zip () пробегает по минимальному входящему набору:
"""
users = ['user1', 'user2', 'user3', 'user4', 'user5']
ids = [4, 5, 9, 14, 7]
salary = [111, 222, 333]
data = list(zip(users, ids, salary))
print(data) # [('user1', 4, 111), ('user2', 5, 222), ('user3', 333)]
"""

# Функция enumerate
# Функция enumerate() применяется к итерируемому объекту и возвращает новый итератор с
# кортежами из индекса и элементов входных данных

# Функция enumerate() позволяет пронумеровать набор данных.

"""
users = ['user1', 'user2', 'user3']
data = list(enumerate(users))
print(data) # [(0, 'user1'), (1, 'user2'), (2, 'user3))]
"""

# Файлы
# Файлы в текстовом формате используются для:
# ● Хранения данных
# ● Передачи данных в клиент-серверных проектах
# ● Хранения конфигов
# ● Логирования действий
# Что нужно для работы с файлами:
# 1. Завести переменную, которая будет связана с этим текстовым файлом.
# 2. Указать путь к файлу.
# 3. Указать, в каком режиме мы будем работать с файлом

# Варианты режима (мод):
    # a – открытие для добавления данных.
# ○ Позволяет дописывать что-то в имеющийся файл.
# ○ Если вы попробуете дописать что-то в несуществующий файл, то файл будет создан
# и в него начнется запись.
    # r – открытие для чтения данных.
# ○ Позволяет читать данные из файла.
# ○ Если вы попробуете считать данные из файла, которого не существует, программа выдаст ошибку.
    # w – открытие для записи данных.
# ○ Позволяет записывать данные и создавать файл, если его не существует

# Миксованные режимы:
#     1. w+
# ○ Позволяет открывать файл для записи и читать из него.
# ○ Если файла не существует, он будет создан.
#     2. r+
# ○ Позволяет открывать файл для чтения и дописывать в него.
# ○ Если файла не существует, программа выдаст ошибку

for i in range(100, 0, -20):
    sum = 
    print(i)